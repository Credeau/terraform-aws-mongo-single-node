#!/bin/bash

# -----------------------------------------------
# Pre-Execution Checks
# -----------------------------------------------

if [[ -z "${mongo_user_name}" || -z "${mongo_password}" ]]; then
  echo "‚ùå Mongo user credentials not provided"
  exit 1
fi

echo "mongo disk size: ${disk_size}"

# -----------------------------------------------
# Pre-Requisites
# -----------------------------------------------

# Exit immediately if a command exits with a non-zero status
set -e

# Prevent interactive prompts during package installation
export DEBIAN_FRONTEND=noninteractive
export NEEDRESTART_MODE=a

cd /home/ubuntu

# Update package lists and handle potential kernel updates
sudo apt update 
sudo apt-get -y upgrade --no-install-recommends -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

# Install tools required in the script ahead
sudo apt-get install -y --no-install-recommends wget curl gpg gnupg net-tools unzip -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
sudo apt-get install -y --no-install-recommends e2fsprogs coreutils python3 python3-pip cron -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

# Install AWS CLI
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

# -----------------------------------------------
# Prepare and mount EBS volume for MongoDB
# -----------------------------------------------

VOLUME_LABEL="mongo_data"
MOUNT_PATH="$${mongo_data_location:-/var/lib/mongodb}"

echo "‚è≥ Waiting for non-root EBS device to appear..."

# Exclude root disk (nvme0n1 or xvda depending on instance type)
for i in {1..30}; do
  POTENTIAL_DEV=$(lsblk -ndo NAME,TYPE | grep disk | awk '{print $1}' | grep -v -E 'nvme0n1|xvda' | head -n 1)
  if [ -n "$POTENTIAL_DEV" ]; then
    VOLUME_DEVICE="/dev/$POTENTIAL_DEV"
    echo "‚úÖ Found EBS device at $VOLUME_DEVICE"
    break
  fi
  sleep 2
done

if [ -z "$VOLUME_DEVICE" ]; then
  echo "‚ùå Could not find non-root EBS device."
  exit 1
fi

# Format and label if necessary
if ! blkid "$VOLUME_DEVICE" | grep "$VOLUME_LABEL"; then
  echo "üîß Formatting $VOLUME_DEVICE as ext4 and labeling as $VOLUME_LABEL"
  sudo mkfs.ext4 -L "$VOLUME_LABEL" "$VOLUME_DEVICE"
fi

# Create mount path if not exists
sudo mkdir -p "$MOUNT_PATH"

# Mount using label
sudo mount -L "$VOLUME_LABEL" "$MOUNT_PATH"

# Persist in fstab
if ! grep -qs "$MOUNT_PATH" /etc/fstab; then
  echo "LABEL=$VOLUME_LABEL $MOUNT_PATH ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
fi

echo "‚úÖ Volume mount is complete at $MOUNT_PATH"

# -----------------------------------------------
# Expand filesystem after resize (if needed)
# -----------------------------------------------

# Resolve correct device from mount
VOLUME_DEVICE=$(findmnt -n -o SOURCE --target "$MOUNT_PATH")

if mountpoint -q "$MOUNT_PATH" && sudo blkid "$VOLUME_DEVICE" | grep -q "TYPE=\"ext4\""; then
  echo "üìè Resizing ext4 filesystem on $VOLUME_DEVICE"
  sudo resize2fs "$VOLUME_DEVICE"
fi

# -----------------------------------------------
# MongoDB installation & Configuration
# -----------------------------------------------

# Add Mongo debian package repository on apt
sudo rm -f /usr/share/keyrings/mongodb-server-7.0.gpg
curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

# Update the local references from newly added package
sudo apt-get update

# Install MongoDB
sudo apt-get install -y --no-install-recommends mongodb-org -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

# Set correct ownership and permissions for MongoDB
sudo chown -R mongodb:mongodb "$MOUNT_PATH"
sudo chmod 755 "$MOUNT_PATH"

# Start MongoDB service
sudo systemctl start mongod

# Wait for MongoDB to become available
until mongosh --eval "db.adminCommand('ping')" &>/dev/null; do
  echo "Waiting for MongoDB to start..."
  sleep 1
done

# Create root credentials if not already exists, else update the password
mongosh admin --quiet --eval '
  if (!db.getUser("${mongo_user_name}")) {
    db.createUser({
      user: "${mongo_user_name}",
      pwd: "${mongo_password}",
      roles: [
        { role: "clusterMonitor", db: "admin" },
        { role: "root", db: "admin" }
      ]
    });
  } else {
    db.changeUserPassword("${mongo_user_name}", "${mongo_password}");
  }
'

# Download mongod root config from S3 
sudo aws s3 cp ${mongo_config_s3_uri} /etc/mongod.conf

# Restart the service to apply changes made to the service
sudo systemctl restart mongod

# Enable mongod to auto-start on boot
sudo systemctl enable mongod

# Create a systemd override for mongod to improve resilience and resource limits
sudo mkdir -p /etc/systemd/system/mongod.service.d

# Download override config from S3
sudo aws s3 cp ${mongod_service_override_s3_uri} /etc/systemd/system/mongod.service.d/override.conf

# Reload systemd and restart mongod with the new overrides
sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl restart mongod

echo "‚úÖ MongoDB installation and configuration is complete"

# -----------------------------------------------
# Install & Configure Monitoring Agents & Scripts
# -----------------------------------------------

# Allow commands to fail without stopping the script as all steps below 
# are only for monitoring setup which is not critical to MongoDB setup
set +e

# Download custom cloudwatch agent configuration to export essential infrastructure metrics from S3
aws s3 cp ${cloudwatch_config_s3_uri} /home/ubuntu/cwa_config.json

# Install the AWS CloudWatch Agent
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

# Import custom cloudwatch agent configuration
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ubuntu/cwa_config.json

# Start and enable cloudwatch agent
sudo systemctl start amazon-cloudwatch-agent
sudo systemctl enable amazon-cloudwatch-agent

# Download custom python script to export MongoInternal metrics to cloudwatch from S3
aws s3 cp ${cloudwatch_script_s3_uri} /home/ubuntu/mongo_cloudwatch.py
chmod +x /home/ubuntu/mongo_cloudwatch.py

# Prepare python environment to execute the script
pip3 install pymongo boto3

# Set a cron schedule to invoke this custom metrics collection script periodically
(crontab -l 2>/dev/null; echo "* * * * * /usr/bin/python3 /home/ubuntu/mongo_cloudwatch.py -u ${mongo_user_name} -P ${mongo_password} -i ${application_identifier}") | crontab -

echo "‚úÖ MongoDB monitoring setup is complete"

# -----------------------------------------------
# Post-Execution Checks
# -----------------------------------------------

# After starting MongoDB service
if ! systemctl is-active --quiet mongod; then
    echo "‚ùå MongoDB service failed to start"
    exit 1
fi

# Check if MongoDB is listening on the correct port
if ! netstat -tuln | grep -q ":${mongo_port}"; then
    echo "‚ùå MongoDB is not listening on port ${mongo_port}"
    exit 1
fi

# After CloudWatch agent installation
if ! systemctl is-active --quiet amazon-cloudwatch-agent; then
    echo "‚ùå CloudWatch agent failed to start"
    exit 1
fi

# Verify CloudWatch agent configuration
if [ ! -f /home/ubuntu/cwa_config.json ]; then
    echo "‚ùå CloudWatch agent configuration file not found"
    exit 1
fi

# After Python package installation
if ! python3 -c "import pymongo, boto3" &> /dev/null; then
    echo "‚ùå Required Python packages not installed"
    exit 1
fi

# After setting up cron job
if ! crontab -l | grep -q "mongo_cloudwatch.py"; then
    echo "‚ùå CloudWatch metrics cron job not set up"
    exit 1
fi

echo "‚úÖ MongoDB setup is complete"